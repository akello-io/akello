{
 "Resources": {
  "akellocore2C67D056": {
   "Type": "AWS::DynamoDB::GlobalTable",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "partition_key",
      "AttributeType": "S"
     },
     {
      "AttributeName": "sort_key",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "KeySchema": [
     {
      "AttributeName": "partition_key",
      "KeyType": "HASH"
     },
     {
      "AttributeName": "sort_key",
      "KeyType": "RANGE"
     }
    ],
    "Replicas": [
     {
      "Region": {
       "Ref": "AWS::Region"
      }
     }
    ],
    "TableName": "akello-core"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "MicroservicesStack/akello-core/Resource"
   }
  },
  "akellomeasurements6D72561B": {
   "Type": "AWS::DynamoDB::GlobalTable",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "partition_key",
      "AttributeType": "S"
     },
     {
      "AttributeName": "timestamp",
      "AttributeType": "N"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "KeySchema": [
     {
      "AttributeName": "partition_key",
      "KeyType": "HASH"
     },
     {
      "AttributeName": "timestamp",
      "KeyType": "RANGE"
     }
    ],
    "Replicas": [
     {
      "Region": {
       "Ref": "AWS::Region"
      }
     }
    ],
    "TableName": "akello-measurements"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "MicroservicesStack/akello-measurements/Resource"
   }
  },
  "fnusermicroserviceServiceRole6DDC6B9D": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MicroservicesStack/fn-user-microservice/ServiceRole/Resource"
   }
  },
  "fnusermicroserviceServiceRoleDefaultPolicyBAB4E40D": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:ConditionCheckItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable",
        "dynamodb:GetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:PutItem",
        "dynamodb:Query",
        "dynamodb:Scan",
        "dynamodb:UpdateItem"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "akellocore2C67D056",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "fnusermicroserviceServiceRoleDefaultPolicyBAB4E40D",
    "Roles": [
     {
      "Ref": "fnusermicroserviceServiceRole6DDC6B9D"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MicroservicesStack/fn-user-microservice/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "fnusermicroservice0FA092C3": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Architectures": [
     "arm64"
    ],
    "Code": {
     "ImageUri": {
      "Fn::Sub": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}:d08a95afd91949a725ba81877cf740f4dcec07805bb061c1861a59c885df994e"
     }
    },
    "FunctionName": "fn-user-microservice",
    "PackageType": "Image",
    "Role": {
     "Fn::GetAtt": [
      "fnusermicroserviceServiceRole6DDC6B9D",
      "Arn"
     ]
    },
    "Timeout": 15
   },
   "DependsOn": [
    "fnusermicroserviceServiceRoleDefaultPolicyBAB4E40D",
    "fnusermicroserviceServiceRole6DDC6B9D"
   ],
   "Metadata": {
    "aws:cdk:path": "MicroservicesStack/fn-user-microservice/Resource",
    "aws:asset:path": "asset.d08a95afd91949a725ba81877cf740f4dcec07805bb061c1861a59c885df994e",
    "aws:asset:dockerfile-path": "Dockerfile.aws.lambda",
    "aws:asset:property": "Code.ImageUri"
   }
  },
  "userserviceapiF4B92DF8": {
   "Type": "AWS::ApiGateway::RestApi",
   "Properties": {
    "Name": "user-service-api"
   },
   "Metadata": {
    "aws:cdk:path": "MicroservicesStack/user-service-api/Resource"
   }
  },
  "userserviceapiDeployment84BF65F61ccca3d3cec53cf29dda2afe19a1e50a": {
   "Type": "AWS::ApiGateway::Deployment",
   "Properties": {
    "Description": "Automatically created by the RestApi construct",
    "RestApiId": {
     "Ref": "userserviceapiF4B92DF8"
    }
   },
   "DependsOn": [
    "userserviceapiidGET1CD46899",
    "userserviceapiidE0D8FDB2",
    "userserviceapiuserPOST2BAE4D27",
    "userserviceapiuserCCF67539"
   ],
   "Metadata": {
    "aws:cdk:path": "MicroservicesStack/user-service-api/Deployment/Resource"
   }
  },
  "userserviceapiDeploymentStageprod469CEF2A": {
   "Type": "AWS::ApiGateway::Stage",
   "Properties": {
    "DeploymentId": {
     "Ref": "userserviceapiDeployment84BF65F61ccca3d3cec53cf29dda2afe19a1e50a"
    },
    "RestApiId": {
     "Ref": "userserviceapiF4B92DF8"
    },
    "StageName": "prod"
   },
   "Metadata": {
    "aws:cdk:path": "MicroservicesStack/user-service-api/DeploymentStage.prod/Resource"
   }
  },
  "userserviceapiidE0D8FDB2": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Fn::GetAtt": [
      "userserviceapiF4B92DF8",
      "RootResourceId"
     ]
    },
    "PathPart": "{id}",
    "RestApiId": {
     "Ref": "userserviceapiF4B92DF8"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MicroservicesStack/user-service-api/Default/{id}/Resource"
   }
  },
  "userserviceapiidGETApiPermissionMicroservicesStackuserserviceapiFD4806BAGETid166E243A": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "fnusermicroservice0FA092C3",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "userserviceapiF4B92DF8"
       },
       "/",
       {
        "Ref": "userserviceapiDeploymentStageprod469CEF2A"
       },
       "/GET/*"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "MicroservicesStack/user-service-api/Default/{id}/GET/ApiPermission.MicroservicesStackuserserviceapiFD4806BA.GET..{id}"
   }
  },
  "userserviceapiidGETApiPermissionTestMicroservicesStackuserserviceapiFD4806BAGETid0E473AE5": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "fnusermicroservice0FA092C3",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "userserviceapiF4B92DF8"
       },
       "/test-invoke-stage/GET/*"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "MicroservicesStack/user-service-api/Default/{id}/GET/ApiPermission.Test.MicroservicesStackuserserviceapiFD4806BA.GET..{id}"
   }
  },
  "userserviceapiidGET1CD46899": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "NONE",
    "HttpMethod": "GET",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "fnusermicroservice0FA092C3",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Ref": "userserviceapiidE0D8FDB2"
    },
    "RestApiId": {
     "Ref": "userserviceapiF4B92DF8"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MicroservicesStack/user-service-api/Default/{id}/GET/Resource"
   }
  },
  "userserviceapiuserCCF67539": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Fn::GetAtt": [
      "userserviceapiF4B92DF8",
      "RootResourceId"
     ]
    },
    "PathPart": "user",
    "RestApiId": {
     "Ref": "userserviceapiF4B92DF8"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MicroservicesStack/user-service-api/Default/user/Resource"
   }
  },
  "userserviceapiuserPOSTApiPermissionMicroservicesStackuserserviceapiFD4806BAPOSTuser182E8FC2": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "fnusermicroservice0FA092C3",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "userserviceapiF4B92DF8"
       },
       "/",
       {
        "Ref": "userserviceapiDeploymentStageprod469CEF2A"
       },
       "/POST/user"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "MicroservicesStack/user-service-api/Default/user/POST/ApiPermission.MicroservicesStackuserserviceapiFD4806BA.POST..user"
   }
  },
  "userserviceapiuserPOSTApiPermissionTestMicroservicesStackuserserviceapiFD4806BAPOSTuser150907B1": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "fnusermicroservice0FA092C3",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:",
       {
        "Ref": "AWS::Partition"
       },
       ":execute-api:",
       {
        "Ref": "AWS::Region"
       },
       ":",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "userserviceapiF4B92DF8"
       },
       "/test-invoke-stage/POST/user"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "MicroservicesStack/user-service-api/Default/user/POST/ApiPermission.Test.MicroservicesStackuserserviceapiFD4806BA.POST..user"
   }
  },
  "userserviceapiuserPOST2BAE4D27": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "NONE",
    "HttpMethod": "POST",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":apigateway:",
        {
         "Ref": "AWS::Region"
        },
        ":lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "fnusermicroservice0FA092C3",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Ref": "userserviceapiuserCCF67539"
    },
    "RestApiId": {
     "Ref": "userserviceapiF4B92DF8"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MicroservicesStack/user-service-api/Default/user/POST/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/1WQzU7DMBCEn6V319D0wrW0AiGBiALiWm3sJSzxT2Q7qqwo747tFBFO++3seLx2xXf7O367gYvfCtlvFbV8egsgepak8ySjAW1lEt+hVfhRseOneVS2BVWEmSnQrQQ+nazo0T1p6PBhNCKQNdm75hqdJu9TNzMCzafGKsyDUmurSMTiKzQzFO4M3mPwfJV+yEqe8QYH6ylYF+/BI4OBOgh4gcin57JVgz4cBipXXPGEg7JRowlZXXXp0V1ZZoHkt6MTWJJ/m2vQwi8YvqzM0kLz/OcrO+YgMl12vI5hGMO/44mP1kgK5TvqmCLMzZ7vKl5tvj3R1o0mkEbeLPUHPGWRYqoBAAA="
   },
   "Metadata": {
    "aws:cdk:path": "MicroservicesStack/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Outputs": {
  "userserviceapiEndpointDCD94136": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "userserviceapiF4B92DF8"
      },
      ".execute-api.",
      {
       "Ref": "AWS::Region"
      },
      ".",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "userserviceapiDeploymentStageprod469CEF2A"
      },
      "/"
     ]
    ]
   }
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "il-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}